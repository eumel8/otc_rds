- name: Lookup rds_flavor_id
  include: flavor.yml

- name: Send request to API (list subnet for lookup)
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/subnets"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: subnet_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: subnet_result.status == 200
  changed_when: false
  when:
    - rds_subnet_name is defined

- name: Set fact for subnet_id if rds_subnet_name is defined
  set_fact:
    subnet_id: "{{ (subnet_result.content|from_json)|json_query(\"subnets[?name=='\" + rds_subnet_name + \"'].id|[0]\") }}"
  when:
    - rds_subnet_name is defined and rds_subnet_name|length != 0

- name: Send request to API (list VPC for lookup)
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/vpcs"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: vpc_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: vpc_result.status == 200
  changed_when: false
  when:
    - rds_vpc_name is defined

- name: Set fact vpc_id if vpc_name is defined
  set_fact:
    vpc_id: "{{ (vpc_result.content|from_json)|json_query(\"vpcs[?name=='\" + rds_vpc_name + \"'].id|[0]\") }}"
  when:
    - rds_vpc_name is defined

- name: Send request to API (list security groups)
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/security-groups"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: secgroup_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: secgroup_result.status == 200
  changed_when: false
  when:
    - rds_secgroup_name is defined

- name: Set fact for secgroup_id if secgroup_name is defined
  set_fact:
    secgroup_id: "{{ (secgroup_result.content|from_json)|json_query(\"security_groups[?name=='\" + rds_secgroup_name + \"'].id|[0]\") }}"
  when:
    - rds_secgroup_name is defined and rds_secgroup_name| length != 0

- name: Send request to API (create RDS)
  uri:
    url: "{{ AUTH_URL_RDS }}/{{ OS_USER_DOMAIN_ID }}/instances"
    method: POST
    body_format: raw
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    status_code: 200,201,202,203
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
      X-Language: "en-us"
    body: "{{ lookup('template', 'create.json.j2')|to_json }}"
  register: rds
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: rds.status == 200 or rds.status == 201 or rds.status == 202 or rds.status == 203
  changed_when: false
  when:
    - rds_name is defined
    - rds_flavor_id is defined
    - not rds_id or rds_id is undefined

- name: Output of  rds
  debug:
    msg: "{{ rds }}"

- name: Set fact rds_id for rds if rds_name is defined
  set_fact:
    rds_id: "{{ (rds.content|from_json)|json_query('instance.id') }}"
  when: rds_name is defined

- name: Send request to API (wait for rds ACTIVE)
  uri:
    url: "{{ AUTH_URL_RDS }}/{{ OS_USER_DOMAIN_ID }}/instances/{{ rds_id }}"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
      X-Language: "en-us"
  register: rds
  retries: 300
  delay: 5
  until: ((rds.content|from_json)|json_query('instance.status')) == 'ACTIVE'
  changed_when: false
  when:
    - rds_id is defined
    - waitfor | bool
